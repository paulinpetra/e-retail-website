//Redux actions to make fetch calls to my Next.js API routes.
// This way, I can centralize my data fetching logic within Redux while still leveraging the server-side capabilities of Next.js.
// store/productsSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { productsFetch } from "@/app/api/productsFetch";

// Async thunk for fetching products
export const fetchProducts = createAsyncThunk(
  "products/fetchProducts", //action type prefix

  // Async function (payload creator) that performs the actual API call

  async (productId = null) => {
    //  async (productId = null) means that if a productId is not provided, the default value of productId will be null.
    // This is what makes productId "optional."
    //therefor work on fetching all products and individual
    const response = await productsFetch(productId); //calling the fetch from the api route
    return response; //return a list or a single value
  }
);

const productsSlice = createSlice({
  name: "products",
  initialState: {
    products: [], //array for multiple products
    product: null, // Single product, used when fetching a specific product by ID
    status: "idle", //Status to track loading state ('idle', 'loading', 'succeeded', 'failed')
    error: null, // Stores any error messages if a request fails
    cartProducts: [], //for the products in the cart
    quantity: 1, //for the product quantity in the cart
  },
  //all the synchronous reducers
  //TODO: add a set initial state reducer from local storage when adding storage

  reducers: {
    // Add to cart or update quantity if it already exists

    addToCart: (state, action) => {
      const itemIndex = state.cartProducts.findIndex(
        (product) => product.id === action.payload.id
      );
      if (itemIndex >= 0) {
        state.cartProducts[itemIndex].quantity += action.payload.quantity;
      } else {
        state.cartProducts.push({
          ...action.payload,
          quantity: action.payload.quantity,
        });
      }
    },

    // Remove from cart by filtering out the item based on its id
    removeFromCart: (state, action) => {
      state.cartProducts = state.cartProducts.filter(
        (product) => product.id !== action.payload
      );
    },
    //Update the quantity of on item in the cart
    updateCartQuantity: (state, action) => {
      const { id, quantity } = action.payload;
      const itemIndex = state.cartProducts.findIndex(
        (product) => product.id === id
      );
      if (itemIndex >= 0) {
        state.cartProducts[itemIndex].quantity = quantity;
      }
    },
    setQuantity: (state, action) => {
      state.quantity = action.payload;
    },
  },

  // Handling the lifecycle of the async thunk using extraReducers
  extraReducers: (builder) => {
    // This builder allows us to add cases for the states of an async thunk
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        // If the API returns an array, set the `products` state

        if (Array.isArray(action.payload)) {
          state.products = action.payload;
        }
        // If the API returns a single product (when `productId` is provided), set the `product` state
        else {
          state.product = action.payload;
        }
        state.status = "succeeded";
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

//Export the actions
export const { addToCart, removeFromCart, updateCartQuantity, setQuantity } =
  productsSlice.actions;

// Export the reducer generated by the slice to be included in the Redux store

export default productsSlice.reducer;
